### Stage 1: Build
FROM python:3.11-slim AS builder
WORKDIR /app

# Copy requirements and install them into a dedicated folder for later reuse
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY app.py .



### Stage 2: Final (Distroless)
FROM gcr.io/distroless/python3-debian12:latest
# (distroless images default to non-root)
WORKDIR /app

# Copy installed dependencies from the builder's default locations.
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages

# Copy the gunicorn executable so we can run it directly.
COPY --from=builder /usr/local/bin/gunicorn /usr/local/bin/gunicorn

# Copy the application code
COPY --from=builder /app/app.py .

# Set environment variables. Workers are set to 3 for demonstration purposes
ENV PYTHONUNBUFFERED=1 \
    APP_VERSION=1.0.0 \
    PORT=5000 \
    GUNICORN_CMD_ARGS="--workers=3 --bind=0.0.0.0:5000" 
    # PYTHONPATH=/app/dependencies \
    # PATH=/app/dependencies:$PATH

# Expose the port the app runs on
EXPOSE 5000

# Run the application
# CMD ["gunicorn", "app:app"] /usr/bin/python3.11: can't open file '/app/gunicorn': [Errno 2] No such file or directory
# CMD ["python", "-m", "gunicorn", "app:app"] /usr/bin/python3.11: can't open file '/app/gunicorn': [Errno 2] No such file or directory
# below crashes too after not finding dependencies in the container. ...
# CMD ["-m", "gunicorn", "app:app"]

# Use the distroless image's default ENTRYPOINT (Python) and supply our arguments.
# This runs "python3 -m gunicorn app:app". But it fails to find the gunicorn module.
# ENTRYPOINT ["python3", "-m", "gunicorn", "app:app"]

# Use the gunicorn executable directly as the ENTRYPOINT.
ENTRYPOINT ["/usr/local/bin/gunicorn", "app:app"]